18. 
	puts 'Hola Mundo'
	Hola Mundo
	=> nil

Podemos observar como el puts nos devuelve dos salidas. La primera es el resultado de la expresión 'Hola Mundo' y lo segundo es lo que devuelve el propio puts; que en este caso es nil.

21. 
	irb(main):001:0> puts "\t\n"
	
	=> nil
	irb(main):002:0> puts '\t\n'
	\t\n
	=> nil

El primero nos devuelve un tabulador. El segundo nos devuelve la expresión tal cual la introducimos.

22.
	irb(main):004:0> puts %q{hello world\n}
	hello world\n
	=> nil
	irb(main):005:0> puts %q{'a' 'b' 'c'}
	'a' 'b' 'c'
	=> nil

El %q{} funciona de la mmisma manera que las comillas simples ''. Es decir, imprimirán la expresión tal cual la hemos escrito, no la evalua.

23.
	irb(main):006:0> puts %Q{hello world\n}
	hello world
	=> nil
	irb(main):008:0> puts %Q{"a" "b" "c"}
	"a" "b" "c"
	=> nil

El %Q{} funciona de la misma forma que las comillas dobles. Es decir, evalua la expresión que hay entre los corchetes.

24. 
	irb(main):009:0> a = 4
	=> 4
	irb(main):010:0> b = 2
	=> 2
	irb(main):016:0> c = <<HERE
	irb(main):017:0" --#{a}--
	irb(main):018:0" --#{b}--
	irb(main):019:0" HERE
	=> "--4--\n--2--\n"
	irb(main):020:0> puts c
	--4--
	--2--
	=> nil

25.
	irb(main):021:0> a = 4
	=> 4
	irb(main):022:0> b = 2
	=> 2
	irb(main):023:0> c = <<'HERE'
	irb(main):024:0' --#{a}--
	irb(main):025:0' --#{b}--
	irb(main):026:0' HERE
	=> "--\#{a}--\n--\#{b}--\n"
	irb(main):027:0> puts c
	--#{a}--
	--#{b}--
	=> nil

26.
	irb(main):028:0> s = "hello"
	=> "hello"
	irb(main):029:0> s[0,2]
	=> "he"
	irb(main):030:0> s[-1,1]
	=> "o"
	irb(main):031:0> s[0,10]
	=> "hello"

27.
	irb(main):032:0> g = "hello"
	=> "hello"
	irb(main):033:0> g << " world"
	=> "hello world"
	irb(main):034:0> puts g
	hello world
	=> nil

28.
	irb(main):035:0> e = '.'*3
	=> "..."

29.
	irb(main):036:0> a = 1
	=> 1
	irb(main):037:0> "#{a=a+1} " *3
	=> "2 2 2 "

30.
	irb(main):038:0> %w{this is a test}
	=> ["this", "is", "a", "test"]

31.
	irb(main):044:0> puts %w[\t \n]
	\t
	\n
	=> nil


32.
	puts %W[\t \n]
	
	
	=> nil

33.
	irb(main):045:0> nils = Array.new(3)
	=> [nil, nil, nil]

34.
	irb(main):048:0> zeros = Array.new(3, 0)
	=> [0, 0, 0]

35.
	irb(main):049:0> x = [[1,2], [3,4]]
	=> [[1, 2], [3, 4]]
	irb(main):050:0> b = Array.new(x)
	=> [[1, 2], [3, 4]]
	irb(main):051:0> puts b
	1
	2
	3
	4
	=> nil

36.
	irb(main):052:0> c = Array.new(3) {|i| 2*i}
	=> [0, 2, 4]

37.
	>> a = ('a'..'e').to_a 
	=> ["a", "b", "c", "d", "e"] 
	>> a[1,1] 
	=> ["b"] 
	>> a[-2,2] 
	=> ["d", "e"] 
	>> a[0..2] 
	=> ["a", "b", "c"] 
	>> a[0...1] 
	=> [0..1] 
	>>a[-2..-1] 
	=> ["d", "e"]

38.
	>> a 
	=> ["a", "b", "c", "d", "e"] 
	>> a[0,2] = %w{A B} 
	=> ["A", "B"] 
	>> a 
	=> ["A", "B", "c", "d", "e"] 
	>> a[2..5] = %w{C D E} 
	=> ["C", "D", "E"] 
	>> a 
	=> ["A", "B", "C", "D", "E"] 
	>> a[0,0] = [1,2,3]
	=> [1, 2, 3] 
	>> a 
	=> [1, 2, 3, "A", "B", "C", "D", "E"] 
	>> a[0,2] = [] 
	=> [] 
	>> a 
	=> [3, "A", "B", "C", "D", "E"] 
	>> a[-1,1] = [ ’Z’ ] 
	=> ["Z"] 
	>> a 
	=> [3, "A", "B", "C", "D", "Z"] 
	>> a[-2,2] = nil 
	=> nil 
	>> a 
	=> [3, "A", "B", "C", nil]

39.
	>> a = (1...4).to_a 
	=> [1, 2, 3, 4] 
	>> a = a + [4, 5] 
	=> [1, 2, 3, 4, 4, 5] 
	>> a += [[6, 7, 8]] 
	=> [1, 2, 3, 4, 4, 5, [6, 7, 8]] 
	>> a = a + 9 
	=> error tienes que pasarle un array

40.
	>> x = %w{a b c b a} 
	=> ["a", "b", "c", "b", "a"] 
	>> x = x - %w{b c d} 
	=> ["a", "a"]

41.
	>> z = [0]*8 
	=> [0, 0, 0, 0, 0, 0, 0, 0]

42.
	>> a = [] 
	=> [] 
	>> a << 1 
	=> [1] 
	>> a << 2 << 3
	=> [1, 2, 3] 
	>> a << [4, 5, 6] 
	=> [1, 2, 3, [4, 5, 6]] 
	>> a.concat [7, 8] 
	=> [1, 2, 3, [4, 5, 6], 7, 8]

43.
	>> a = [1, 1, 2, 2, 3, 3, 4] 
	=> [1, 1, 2, 2, 3, 3, 4] 
	>> b = [5,5, 4, 4, 3, 3, 2] 
	=> [5, 5, 4, 4, 3, 3, 2] 
	>> c = a | b 
	=> [1, 2, 3, 4, 5] 
	>> d = b | a 
	=> [5, 4, 3, 2, 1] 
	>> e = a & b
	=> [2, 3, 4] 
	>> f = b & a 
	=> [4, 3, 2]

44.
	>> a = 1..10 
	=> 1..10 
	>> a.class 
	=> Range
	>> a.to_a
	=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
	>> b = 1...10 
	=> 1....10
	>> b.to_a
	=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
	>> b.include? 10 
	=> true
	>> b.include? 8 
	=> true 
	>> b.step(2) {|x| print "#{x} " } 
	=> 13579=> 1..10
	>> 1..3.to_a 
	=> error

45.
	>> r = 0...100 
	=> 0....100
	>> r.member? 50 
	=> true 
	>> r.include? 99.9 
	=> true 
	>> r.member? 99.9
	=> true

46.
	>> true.class 
	=> TrueClass 
	>> false.class 
	=> FalseClass 
	>> puts "hello" if 0 
	hello
	=> nil 
	>> puts "hello" if nil 
	=> nil
	>> puts "hello" if "" 
	=> hello
	=> nil

47.
	>> x = :sym 
	=> :sym 
	>> x.class
	=> Symbol
	>> x == ’sym’ 
	=> false 
	>> x == :sym
	=> true 
	>> z = :’a long symbol’ 
	=> :"a long symbol" 
	>> z.class 
	=> Symbol 
	>> x == ’sym’.to_sym
	=> true 
	>> x.to_s == ’sym’
	=> true

48.
	>> s = "Ruby" 
	=> "Ruby" 
	>> t = s 
	=> "Ruby" 
	>> t[-1] = "" 
	=> ""
	>> print s
	=>Rub
	>> t = "Java" 
	=> "Java" 
	>> print s, t 
	RubJava => nil

49.
	>> "%d %s" % [3, "rubies"] 
	=> "3 rubies"

50.
	>> x, y = 4, 5 
	=> [4, 5] 
	>> z = x > y ? x : y 
	=> 5 
	>> x,y,z = [1,2,3] 
	=> => [1, 2, 3]

51.
	>> x = { :a => 1, :b => 2 } 
	=> {:b=>2, :a=>1} 
	>> x.keys
	=> [:a, :b] 
	>> x.values
	=> [1, 2] 
	>> x[:c] = 3 
	=> 3 
	>> x 
	=> {:a=>1, :b=>2, :c=>3} 
	>> x.delete(’a’)
	=> nil 
	>> x 
	=> {:a=>1, :b=>2, :c=>3} 
	>> x.delete(:a)
	=> 1 
	>> x 
	=> {:b=>2, :c=>3} 
	>> x = { :a => 1, :b => 2, :c => 4 } 
	=> {:b=>2, :c=>4, :a=>1} 
	>> x.delete_if { |k,v| v % 2 == 0 }
	=> {:a=>1} 
	>> x 
	=> {:a=>1}

52.
	Se le pasa a un bloque, como parámetros, los valores 4 y 5.

53.
	La primera sentencia crea un hash con claves inicializadas a cero y la segunda a nils.

54.
	Nos devuelve las palabras repetidas una o mas veces de esa cadena. 
	=> ["hello", "world", "hello", "LPP"]

55.
	irb(main):095:0> j = {:a => 3, :b => 2, :c => 1}
	=> {:b=>2, :c=>1, :a=>3}
	irb(main):096:0> j.keys.sort.each {|k| puts c[k]}
	NoMethodError: undefined method `<=>' for :c:Symbol
		from (irb):56:in `sort'
		from (irb):56
		from :0

	*ERROR*
	alu3930@cc394:~/datos/homes.rala/LPP/prct03$ ruby -v
	ruby 1.8.7 (2011-06-30 patchlevel 352) [i686-linux]

